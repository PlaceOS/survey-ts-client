/* tslint:disable */
/* eslint-disable */
/**
 * staff-api
 * PlaceOS Staff-API description
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * generic error feedback, backtraces only provided in development
 * @export
 * @interface ApplicationCommonError
 */
export interface ApplicationCommonError {
    /**
     * 
     * @type {string}
     * @memberof ApplicationCommonError
     */
    'error': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApplicationCommonError
     */
    'backtrace'?: Array<string> | null;
}
/**
 * provides a list of acceptable content types if an unknown one is requested
 * @export
 * @interface ApplicationContentError
 */
export interface ApplicationContentError {
    /**
     * 
     * @type {string}
     * @memberof ApplicationContentError
     */
    'error': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApplicationContentError
     */
    'accepts'?: Array<string> | null;
}
/**
 * Provides details on which parameter is missing or invalid
 * @export
 * @interface ApplicationParameterError
 */
export interface ApplicationParameterError {
    /**
     * 
     * @type {string}
     * @memberof ApplicationParameterError
     */
    'error': string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationParameterError
     */
    'parameter'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApplicationParameterError
     */
    'restriction'?: string | null;
}
/**
 * 
 * @export
 * @interface ApplicationValidationError
 */
export interface ApplicationValidationError {
    /**
     * 
     * @type {string}
     * @memberof ApplicationValidationError
     */
    'error': string;
    /**
     * 
     * @type {Array<ApplicationValidationErrorFailuresInner>}
     * @memberof ApplicationValidationError
     */
    'failures': Array<ApplicationValidationErrorFailuresInner>;
}
/**
 * 
 * @export
 * @interface ApplicationValidationErrorFailuresInner
 */
export interface ApplicationValidationErrorFailuresInner {
    /**
     * 
     * @type {string}
     * @memberof ApplicationValidationErrorFailuresInner
     */
    'field'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApplicationValidationErrorFailuresInner
     */
    'reason': string;
}
/**
 * 
 * @export
 * @interface ArraySurveyAnswerResponderInner
 */
export interface ArraySurveyAnswerResponderInner {
    /**
     * 
     * @type {number}
     * @memberof ArraySurveyAnswerResponderInner
     */
    'id'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ArraySurveyAnswerResponderInner
     */
    'question_id'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ArraySurveyAnswerResponderInner
     */
    'survey_id'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ArraySurveyAnswerResponderInner
     */
    'answer_text'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ArraySurveyAnswerResponderInner
     */
    'answer_json'?: object | null;
}
/**
 * 
 * @export
 * @interface SurveyAnswerResponder
 */
export interface SurveyAnswerResponder {
    /**
     * 
     * @type {number}
     * @memberof SurveyAnswerResponder
     */
    'id'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof SurveyAnswerResponder
     */
    'question_id'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof SurveyAnswerResponder
     */
    'survey_id'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof SurveyAnswerResponder
     */
    'answer_text'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof SurveyAnswerResponder
     */
    'answer_json'?: object | null;
}
/**
 * 
 * @export
 * @interface SurveyInvitationResponder
 */
export interface SurveyInvitationResponder {
    /**
     * 
     * @type {number}
     * @memberof SurveyInvitationResponder
     */
    'id'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof SurveyInvitationResponder
     */
    'survey_id'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof SurveyInvitationResponder
     */
    'token'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SurveyInvitationResponder
     */
    'email'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof SurveyInvitationResponder
     */
    'sent'?: boolean | null;
}
/**
 * 
 * @export
 * @interface SurveyQuestionResponder
 */
export interface SurveyQuestionResponder {
    /**
     * 
     * @type {number}
     * @memberof SurveyQuestionResponder
     */
    'id'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof SurveyQuestionResponder
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SurveyQuestionResponder
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SurveyQuestionResponder
     */
    'type'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof SurveyQuestionResponder
     */
    'options'?: object | null;
}
/**
 * 
 * @export
 * @interface SurveyResponder
 */
export interface SurveyResponder {
    /**
     * 
     * @type {number}
     * @memberof SurveyResponder
     */
    'id'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof SurveyResponder
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SurveyResponder
     */
    'description'?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof SurveyResponder
     */
    'question_order'?: Array<number> | null;
}

/**
 * AnswersApi - axios parameter creator
 * @export
 */
export const AnswersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary creates a new survey answer
         * @param {Array<ArraySurveyAnswerResponderInner>} arraySurveyAnswerResponderInner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysAnswersCreate: async (arraySurveyAnswerResponderInner: Array<ArraySurveyAnswerResponderInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arraySurveyAnswerResponderInner' is not null or undefined
            assertParamExists('surveysAnswersCreate', 'arraySurveyAnswerResponderInner', arraySurveyAnswerResponderInner)
            const localVarPath = `/api/staff/v1/surveys/answers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(arraySurveyAnswerResponderInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary returns a list of answers
         * @param {number} [surveyId] the survey id to get answers for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysAnswersIndex: async (surveyId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/staff/v1/surveys/answers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (surveyId !== undefined) {
                localVarQueryParameter['survey_id'] = surveyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnswersApi - functional programming interface
 * @export
 */
export const AnswersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AnswersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary creates a new survey answer
         * @param {Array<ArraySurveyAnswerResponderInner>} arraySurveyAnswerResponderInner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async surveysAnswersCreate(arraySurveyAnswerResponderInner: Array<ArraySurveyAnswerResponderInner>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SurveyAnswerResponder>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.surveysAnswersCreate(arraySurveyAnswerResponderInner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary returns a list of answers
         * @param {number} [surveyId] the survey id to get answers for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async surveysAnswersIndex(surveyId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SurveyAnswerResponder>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.surveysAnswersIndex(surveyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AnswersApi - factory interface
 * @export
 */
export const AnswersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AnswersApiFp(configuration)
    return {
        /**
         * 
         * @summary creates a new survey answer
         * @param {Array<ArraySurveyAnswerResponderInner>} arraySurveyAnswerResponderInner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysAnswersCreate(arraySurveyAnswerResponderInner: Array<ArraySurveyAnswerResponderInner>, options?: any): AxiosPromise<Array<SurveyAnswerResponder>> {
            return localVarFp.surveysAnswersCreate(arraySurveyAnswerResponderInner, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary returns a list of answers
         * @param {number} [surveyId] the survey id to get answers for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysAnswersIndex(surveyId?: number, options?: any): AxiosPromise<Array<SurveyAnswerResponder>> {
            return localVarFp.surveysAnswersIndex(surveyId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AnswersApi - object-oriented interface
 * @export
 * @class AnswersApi
 * @extends {BaseAPI}
 */
export class AnswersApi extends BaseAPI {
    /**
     * 
     * @summary creates a new survey answer
     * @param {Array<ArraySurveyAnswerResponderInner>} arraySurveyAnswerResponderInner 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswersApi
     */
    public surveysAnswersCreate(arraySurveyAnswerResponderInner: Array<ArraySurveyAnswerResponderInner>, options?: AxiosRequestConfig) {
        return AnswersApiFp(this.configuration).surveysAnswersCreate(arraySurveyAnswerResponderInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary returns a list of answers
     * @param {number} [surveyId] the survey id to get answers for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswersApi
     */
    public surveysAnswersIndex(surveyId?: number, options?: AxiosRequestConfig) {
        return AnswersApiFp(this.configuration).surveysAnswersIndex(surveyId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InvitationsApi - axios parameter creator
 * @export
 */
export const InvitationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary creates a new invitation
         * @param {SurveyInvitationResponder} surveyInvitationResponder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysInvitationsCreate: async (surveyInvitationResponder: SurveyInvitationResponder, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyInvitationResponder' is not null or undefined
            assertParamExists('surveysInvitationsCreate', 'surveyInvitationResponder', surveyInvitationResponder)
            const localVarPath = `/api/staff/v1/surveys/invitations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(surveyInvitationResponder, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deletes the invitation
         * @param {Null} id 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysInvitationsDestroy: async (id: Null, token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('surveysInvitationsDestroy', 'id', id)
            // verify required parameter 'token' is not null or undefined
            assertParamExists('surveysInvitationsDestroy', 'token', token)
            const localVarPath = `/api/staff/v1/surveys/invitations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary returns a list of invitations
         * @param {number} [surveyId] the survey id to get invitations for
         * @param {boolean} [sent] filter by sent status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysInvitationsIndex: async (surveyId?: number, sent?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/staff/v1/surveys/invitations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (surveyId !== undefined) {
                localVarQueryParameter['survey_id'] = surveyId;
            }

            if (sent !== undefined) {
                localVarQueryParameter['sent'] = sent;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary show an invitation
         * @param {string} token the invitation token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysInvitationsShow: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('surveysInvitationsShow', 'token', token)
            const localVarPath = `/api/staff/v1/surveys/invitations/{token}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvitationsApi - functional programming interface
 * @export
 */
export const InvitationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvitationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary creates a new invitation
         * @param {SurveyInvitationResponder} surveyInvitationResponder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async surveysInvitationsCreate(surveyInvitationResponder: SurveyInvitationResponder, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SurveyInvitationResponder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.surveysInvitationsCreate(surveyInvitationResponder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deletes the invitation
         * @param {Null} id 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async surveysInvitationsDestroy(id: Null, token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.surveysInvitationsDestroy(id, token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary returns a list of invitations
         * @param {number} [surveyId] the survey id to get invitations for
         * @param {boolean} [sent] filter by sent status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async surveysInvitationsIndex(surveyId?: number, sent?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SurveyInvitationResponder>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.surveysInvitationsIndex(surveyId, sent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary show an invitation
         * @param {string} token the invitation token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async surveysInvitationsShow(token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SurveyInvitationResponder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.surveysInvitationsShow(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InvitationsApi - factory interface
 * @export
 */
export const InvitationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvitationsApiFp(configuration)
    return {
        /**
         * 
         * @summary creates a new invitation
         * @param {SurveyInvitationResponder} surveyInvitationResponder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysInvitationsCreate(surveyInvitationResponder: SurveyInvitationResponder, options?: any): AxiosPromise<SurveyInvitationResponder> {
            return localVarFp.surveysInvitationsCreate(surveyInvitationResponder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deletes the invitation
         * @param {Null} id 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysInvitationsDestroy(id: Null, token: string, options?: any): AxiosPromise<void> {
            return localVarFp.surveysInvitationsDestroy(id, token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary returns a list of invitations
         * @param {number} [surveyId] the survey id to get invitations for
         * @param {boolean} [sent] filter by sent status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysInvitationsIndex(surveyId?: number, sent?: boolean, options?: any): AxiosPromise<Array<SurveyInvitationResponder>> {
            return localVarFp.surveysInvitationsIndex(surveyId, sent, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary show an invitation
         * @param {string} token the invitation token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysInvitationsShow(token: string, options?: any): AxiosPromise<SurveyInvitationResponder> {
            return localVarFp.surveysInvitationsShow(token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InvitationsApi - object-oriented interface
 * @export
 * @class InvitationsApi
 * @extends {BaseAPI}
 */
export class InvitationsApi extends BaseAPI {
    /**
     * 
     * @summary creates a new invitation
     * @param {SurveyInvitationResponder} surveyInvitationResponder 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */
    public surveysInvitationsCreate(surveyInvitationResponder: SurveyInvitationResponder, options?: AxiosRequestConfig) {
        return InvitationsApiFp(this.configuration).surveysInvitationsCreate(surveyInvitationResponder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deletes the invitation
     * @param {Null} id 
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */
    public surveysInvitationsDestroy(id: Null, token: string, options?: AxiosRequestConfig) {
        return InvitationsApiFp(this.configuration).surveysInvitationsDestroy(id, token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary returns a list of invitations
     * @param {number} [surveyId] the survey id to get invitations for
     * @param {boolean} [sent] filter by sent status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */
    public surveysInvitationsIndex(surveyId?: number, sent?: boolean, options?: AxiosRequestConfig) {
        return InvitationsApiFp(this.configuration).surveysInvitationsIndex(surveyId, sent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary show an invitation
     * @param {string} token the invitation token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */
    public surveysInvitationsShow(token: string, options?: AxiosRequestConfig) {
        return InvitationsApiFp(this.configuration).surveysInvitationsShow(token, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * QuestionsApi - axios parameter creator
 * @export
 */
export const QuestionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary creates a new question
         * @param {SurveyQuestionResponder} surveyQuestionResponder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysQuestionsCreate: async (surveyQuestionResponder: SurveyQuestionResponder, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyQuestionResponder' is not null or undefined
            assertParamExists('surveysQuestionsCreate', 'surveyQuestionResponder', surveyQuestionResponder)
            const localVarPath = `/api/staff/v1/surveys/questions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(surveyQuestionResponder, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deletes the question
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysQuestionsDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('surveysQuestionsDestroy', 'id', id)
            const localVarPath = `/api/staff/v1/surveys/questions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary returns a list of questions
         * @param {number} [surveyId] the survey id to get questions for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysQuestionsIndex: async (surveyId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/staff/v1/surveys/questions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (surveyId !== undefined) {
                localVarQueryParameter['survey_id'] = surveyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary show a question
         * @param {number} id the question id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysQuestionsShow: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('surveysQuestionsShow', 'id', id)
            const localVarPath = `/api/staff/v1/surveys/questions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuestionsApi - functional programming interface
 * @export
 */
export const QuestionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuestionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary creates a new question
         * @param {SurveyQuestionResponder} surveyQuestionResponder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async surveysQuestionsCreate(surveyQuestionResponder: SurveyQuestionResponder, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SurveyQuestionResponder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.surveysQuestionsCreate(surveyQuestionResponder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deletes the question
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async surveysQuestionsDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.surveysQuestionsDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary returns a list of questions
         * @param {number} [surveyId] the survey id to get questions for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async surveysQuestionsIndex(surveyId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SurveyQuestionResponder>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.surveysQuestionsIndex(surveyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary show a question
         * @param {number} id the question id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async surveysQuestionsShow(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SurveyQuestionResponder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.surveysQuestionsShow(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QuestionsApi - factory interface
 * @export
 */
export const QuestionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuestionsApiFp(configuration)
    return {
        /**
         * 
         * @summary creates a new question
         * @param {SurveyQuestionResponder} surveyQuestionResponder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysQuestionsCreate(surveyQuestionResponder: SurveyQuestionResponder, options?: any): AxiosPromise<SurveyQuestionResponder> {
            return localVarFp.surveysQuestionsCreate(surveyQuestionResponder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deletes the question
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysQuestionsDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.surveysQuestionsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary returns a list of questions
         * @param {number} [surveyId] the survey id to get questions for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysQuestionsIndex(surveyId?: number, options?: any): AxiosPromise<Array<SurveyQuestionResponder>> {
            return localVarFp.surveysQuestionsIndex(surveyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary show a question
         * @param {number} id the question id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysQuestionsShow(id: number, options?: any): AxiosPromise<SurveyQuestionResponder> {
            return localVarFp.surveysQuestionsShow(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuestionsApi - object-oriented interface
 * @export
 * @class QuestionsApi
 * @extends {BaseAPI}
 */
export class QuestionsApi extends BaseAPI {
    /**
     * 
     * @summary creates a new question
     * @param {SurveyQuestionResponder} surveyQuestionResponder 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsApi
     */
    public surveysQuestionsCreate(surveyQuestionResponder: SurveyQuestionResponder, options?: AxiosRequestConfig) {
        return QuestionsApiFp(this.configuration).surveysQuestionsCreate(surveyQuestionResponder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deletes the question
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsApi
     */
    public surveysQuestionsDestroy(id: number, options?: AxiosRequestConfig) {
        return QuestionsApiFp(this.configuration).surveysQuestionsDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary returns a list of questions
     * @param {number} [surveyId] the survey id to get questions for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsApi
     */
    public surveysQuestionsIndex(surveyId?: number, options?: AxiosRequestConfig) {
        return QuestionsApiFp(this.configuration).surveysQuestionsIndex(surveyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary show a question
     * @param {number} id the question id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsApi
     */
    public surveysQuestionsShow(id: number, options?: AxiosRequestConfig) {
        return QuestionsApiFp(this.configuration).surveysQuestionsShow(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SurveysApi - axios parameter creator
 * @export
 */
export const SurveysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary creates a new survey
         * @param {SurveyResponder} surveyResponder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysCreate: async (surveyResponder: SurveyResponder, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyResponder' is not null or undefined
            assertParamExists('surveysCreate', 'surveyResponder', surveyResponder)
            const localVarPath = `/api/staff/v1/surveys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(surveyResponder, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deletes the survey
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('surveysDestroy', 'id', id)
            const localVarPath = `/api/staff/v1/surveys/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary returns a list of surveys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysIndex: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/staff/v1/surveys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary show a survey
         * @param {number} id the survey id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysShow: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('surveysShow', 'id', id)
            const localVarPath = `/api/staff/v1/surveys/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary patches an existing survey
         * @param {number} id 
         * @param {SurveyResponder} surveyResponder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysUpdate: async (id: number, surveyResponder: SurveyResponder, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('surveysUpdate', 'id', id)
            // verify required parameter 'surveyResponder' is not null or undefined
            assertParamExists('surveysUpdate', 'surveyResponder', surveyResponder)
            const localVarPath = `/api/staff/v1/surveys/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(surveyResponder, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary patches an existing survey
         * @param {number} id 
         * @param {SurveyResponder} surveyResponder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysUpdate2: async (id: number, surveyResponder: SurveyResponder, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('surveysUpdate2', 'id', id)
            // verify required parameter 'surveyResponder' is not null or undefined
            assertParamExists('surveysUpdate2', 'surveyResponder', surveyResponder)
            const localVarPath = `/api/staff/v1/surveys/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(surveyResponder, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SurveysApi - functional programming interface
 * @export
 */
export const SurveysApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SurveysApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary creates a new survey
         * @param {SurveyResponder} surveyResponder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async surveysCreate(surveyResponder: SurveyResponder, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SurveyResponder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.surveysCreate(surveyResponder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deletes the survey
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async surveysDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.surveysDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary returns a list of surveys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async surveysIndex(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SurveyResponder>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.surveysIndex(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary show a survey
         * @param {number} id the survey id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async surveysShow(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SurveyResponder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.surveysShow(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary patches an existing survey
         * @param {number} id 
         * @param {SurveyResponder} surveyResponder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async surveysUpdate(id: number, surveyResponder: SurveyResponder, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SurveyResponder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.surveysUpdate(id, surveyResponder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary patches an existing survey
         * @param {number} id 
         * @param {SurveyResponder} surveyResponder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async surveysUpdate2(id: number, surveyResponder: SurveyResponder, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SurveyResponder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.surveysUpdate2(id, surveyResponder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SurveysApi - factory interface
 * @export
 */
export const SurveysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SurveysApiFp(configuration)
    return {
        /**
         * 
         * @summary creates a new survey
         * @param {SurveyResponder} surveyResponder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysCreate(surveyResponder: SurveyResponder, options?: any): AxiosPromise<SurveyResponder> {
            return localVarFp.surveysCreate(surveyResponder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deletes the survey
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.surveysDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary returns a list of surveys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysIndex(options?: any): AxiosPromise<Array<SurveyResponder>> {
            return localVarFp.surveysIndex(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary show a survey
         * @param {number} id the survey id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysShow(id: number, options?: any): AxiosPromise<SurveyResponder> {
            return localVarFp.surveysShow(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary patches an existing survey
         * @param {number} id 
         * @param {SurveyResponder} surveyResponder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysUpdate(id: number, surveyResponder: SurveyResponder, options?: any): AxiosPromise<SurveyResponder> {
            return localVarFp.surveysUpdate(id, surveyResponder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary patches an existing survey
         * @param {number} id 
         * @param {SurveyResponder} surveyResponder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        surveysUpdate2(id: number, surveyResponder: SurveyResponder, options?: any): AxiosPromise<SurveyResponder> {
            return localVarFp.surveysUpdate2(id, surveyResponder, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SurveysApi - object-oriented interface
 * @export
 * @class SurveysApi
 * @extends {BaseAPI}
 */
export class SurveysApi extends BaseAPI {
    /**
     * 
     * @summary creates a new survey
     * @param {SurveyResponder} surveyResponder 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveysApi
     */
    public surveysCreate(surveyResponder: SurveyResponder, options?: AxiosRequestConfig) {
        return SurveysApiFp(this.configuration).surveysCreate(surveyResponder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deletes the survey
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveysApi
     */
    public surveysDestroy(id: number, options?: AxiosRequestConfig) {
        return SurveysApiFp(this.configuration).surveysDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary returns a list of surveys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveysApi
     */
    public surveysIndex(options?: AxiosRequestConfig) {
        return SurveysApiFp(this.configuration).surveysIndex(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary show a survey
     * @param {number} id the survey id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveysApi
     */
    public surveysShow(id: number, options?: AxiosRequestConfig) {
        return SurveysApiFp(this.configuration).surveysShow(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary patches an existing survey
     * @param {number} id 
     * @param {SurveyResponder} surveyResponder 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveysApi
     */
    public surveysUpdate(id: number, surveyResponder: SurveyResponder, options?: AxiosRequestConfig) {
        return SurveysApiFp(this.configuration).surveysUpdate(id, surveyResponder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary patches an existing survey
     * @param {number} id 
     * @param {SurveyResponder} surveyResponder 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveysApi
     */
    public surveysUpdate2(id: number, surveyResponder: SurveyResponder, options?: AxiosRequestConfig) {
        return SurveysApiFp(this.configuration).surveysUpdate2(id, surveyResponder, options).then((request) => request(this.axios, this.basePath));
    }
}


