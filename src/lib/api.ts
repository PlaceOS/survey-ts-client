/* tslint:disable */
/* eslint-disable */
/**
 * staff-api
 * PlaceOS Staff-API description
 *
 * The version of the OpenAPI document: 1.2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig
} from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from './common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError
} from './base';

/**
 * generic error feedback, backtraces only provided in development
 * @export
 * @interface ApplicationCommonError
 */
export interface ApplicationCommonError {
  /**
   *
   * @type {string}
   * @memberof ApplicationCommonError
   */
  error: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApplicationCommonError
   */
  backtrace?: Array<string> | null;
}
/**
 * provides a list of acceptable content types if an unknown one is requested
 * @export
 * @interface ApplicationContentError
 */
export interface ApplicationContentError {
  /**
   *
   * @type {string}
   * @memberof ApplicationContentError
   */
  error: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApplicationContentError
   */
  accepts?: Array<string> | null;
}
/**
 * Provides details on which parameter is missing or invalid
 * @export
 * @interface ApplicationParameterError
 */
export interface ApplicationParameterError {
  /**
   *
   * @type {string}
   * @memberof ApplicationParameterError
   */
  error: string;
  /**
   *
   * @type {string}
   * @memberof ApplicationParameterError
   */
  parameter?: string | null;
  /**
   *
   * @type {string}
   * @memberof ApplicationParameterError
   */
  restriction?: string | null;
}
/**
 *
 * @export
 * @interface ApplicationValidationError
 */
export interface ApplicationValidationError {
  /**
   *
   * @type {string}
   * @memberof ApplicationValidationError
   */
  error: string;
  /**
   *
   * @type {Array<ApplicationValidationErrorFailuresInner>}
   * @memberof ApplicationValidationError
   */
  failures: Array<ApplicationValidationErrorFailuresInner>;
}
/**
 *
 * @export
 * @interface ApplicationValidationErrorFailuresInner
 */
export interface ApplicationValidationErrorFailuresInner {
  /**
   *
   * @type {string}
   * @memberof ApplicationValidationErrorFailuresInner
   */
  field?: string | null;
  /**
   *
   * @type {string}
   * @memberof ApplicationValidationErrorFailuresInner
   */
  reason: string;
}
/**
 *
 * @export
 * @interface SurveyResponder
 */
export interface SurveyResponder {
  /**
   *
   * @type {number}
   * @memberof SurveyResponder
   */
  id?: number | null;
  /**
   *
   * @type {string}
   * @memberof SurveyResponder
   */
  title?: string | null;
  /**
   *
   * @type {string}
   * @memberof SurveyResponder
   */
  description?: string | null;
  /**
   *
   * @type {Array<number>}
   * @memberof SurveyResponder
   */
  question_order?: Array<number> | null;
}

/**
 * SurveysApi - axios parameter creator
 * @export
 */
export const SurveysApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary creates a new survey
     * @param {SurveyResponder} surveyResponder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    surveysCreate: async (
      surveyResponder: SurveyResponder,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'surveyResponder' is not null or undefined
      assertParamExists('surveysCreate', 'surveyResponder', surveyResponder);
      const localVarPath = `/api/staff/v1/surveys`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        surveyResponder,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary deletes the survey
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    surveysDestroy: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('surveysDestroy', 'id', id);
      const localVarPath = `/api/staff/v1/surveys/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary returns a list of surveys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    surveysIndex: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/staff/v1/surveys`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary show a survey
     * @param {string} id the survey id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    surveysShow: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('surveysShow', 'id', id);
      const localVarPath = `/api/staff/v1/surveys/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary patches an existing survey
     * @param {number} id
     * @param {SurveyResponder} surveyResponder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    surveysUpdate: async (
      id: number,
      surveyResponder: SurveyResponder,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('surveysUpdate', 'id', id);
      // verify required parameter 'surveyResponder' is not null or undefined
      assertParamExists('surveysUpdate', 'surveyResponder', surveyResponder);
      const localVarPath = `/api/staff/v1/surveys/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        surveyResponder,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary patches an existing survey
     * @param {number} id
     * @param {SurveyResponder} surveyResponder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    surveysUpdate2: async (
      id: number,
      surveyResponder: SurveyResponder,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('surveysUpdate2', 'id', id);
      // verify required parameter 'surveyResponder' is not null or undefined
      assertParamExists('surveysUpdate2', 'surveyResponder', surveyResponder);
      const localVarPath = `/api/staff/v1/surveys/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        surveyResponder,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * SurveysApi - functional programming interface
 * @export
 */
export const SurveysApiFp = function(configuration?: Configuration) {
  const localVarAxiosParamCreator = SurveysApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary creates a new survey
     * @param {SurveyResponder} surveyResponder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async surveysCreate(
      surveyResponder: SurveyResponder,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SurveyResponder>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.surveysCreate(
        surveyResponder,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary deletes the survey
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async surveysDestroy(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.surveysDestroy(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary returns a list of surveys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async surveysIndex(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<SurveyResponder>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.surveysIndex(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary show a survey
     * @param {string} id the survey id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async surveysShow(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SurveyResponder>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.surveysShow(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary patches an existing survey
     * @param {number} id
     * @param {SurveyResponder} surveyResponder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async surveysUpdate(
      id: number,
      surveyResponder: SurveyResponder,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SurveyResponder>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.surveysUpdate(
        id,
        surveyResponder,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary patches an existing survey
     * @param {number} id
     * @param {SurveyResponder} surveyResponder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async surveysUpdate2(
      id: number,
      surveyResponder: SurveyResponder,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SurveyResponder>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.surveysUpdate2(
        id,
        surveyResponder,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};

/**
 * SurveysApi - factory interface
 * @export
 */
export const SurveysApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SurveysApiFp(configuration);
  return {
    /**
     *
     * @summary creates a new survey
     * @param {SurveyResponder} surveyResponder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    surveysCreate(
      surveyResponder: SurveyResponder,
      options?: any
    ): AxiosPromise<SurveyResponder> {
      return localVarFp
        .surveysCreate(surveyResponder, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary deletes the survey
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    surveysDestroy(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .surveysDestroy(id, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary returns a list of surveys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    surveysIndex(options?: any): AxiosPromise<Array<SurveyResponder>> {
      return localVarFp
        .surveysIndex(options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary show a survey
     * @param {string} id the survey id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    surveysShow(id: string, options?: any): AxiosPromise<SurveyResponder> {
      return localVarFp
        .surveysShow(id, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary patches an existing survey
     * @param {number} id
     * @param {SurveyResponder} surveyResponder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    surveysUpdate(
      id: number,
      surveyResponder: SurveyResponder,
      options?: any
    ): AxiosPromise<SurveyResponder> {
      return localVarFp
        .surveysUpdate(id, surveyResponder, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary patches an existing survey
     * @param {number} id
     * @param {SurveyResponder} surveyResponder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    surveysUpdate2(
      id: number,
      surveyResponder: SurveyResponder,
      options?: any
    ): AxiosPromise<SurveyResponder> {
      return localVarFp
        .surveysUpdate2(id, surveyResponder, options)
        .then(request => request(axios, basePath));
    }
  };
};

/**
 * SurveysApi - object-oriented interface
 * @export
 * @class SurveysApi
 * @extends {BaseAPI}
 */
export class SurveysApi extends BaseAPI {
  /**
   *
   * @summary creates a new survey
   * @param {SurveyResponder} surveyResponder
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SurveysApi
   */
  public surveysCreate(
    surveyResponder: SurveyResponder,
    options?: AxiosRequestConfig
  ) {
    return SurveysApiFp(this.configuration)
      .surveysCreate(surveyResponder, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary deletes the survey
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SurveysApi
   */
  public surveysDestroy(id: number, options?: AxiosRequestConfig) {
    return SurveysApiFp(this.configuration)
      .surveysDestroy(id, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary returns a list of surveys
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SurveysApi
   */
  public surveysIndex(options?: AxiosRequestConfig) {
    return SurveysApiFp(this.configuration)
      .surveysIndex(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary show a survey
   * @param {string} id the survey id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SurveysApi
   */
  public surveysShow(id: string, options?: AxiosRequestConfig) {
    return SurveysApiFp(this.configuration)
      .surveysShow(id, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary patches an existing survey
   * @param {number} id
   * @param {SurveyResponder} surveyResponder
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SurveysApi
   */
  public surveysUpdate(
    id: number,
    surveyResponder: SurveyResponder,
    options?: AxiosRequestConfig
  ) {
    return SurveysApiFp(this.configuration)
      .surveysUpdate(id, surveyResponder, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary patches an existing survey
   * @param {number} id
   * @param {SurveyResponder} surveyResponder
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SurveysApi
   */
  public surveysUpdate2(
    id: number,
    surveyResponder: SurveyResponder,
    options?: AxiosRequestConfig
  ) {
    return SurveysApiFp(this.configuration)
      .surveysUpdate2(id, surveyResponder, options)
      .then(request => request(this.axios, this.basePath));
  }
}
